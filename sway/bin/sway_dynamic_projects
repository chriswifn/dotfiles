#!/usr/bin/python3

# Description:  Script to dynamically create, rename and control projects
# Dependencies: See python imports
# Author:       Christian Hageloch
# Inspired by https://github.com/sainathadapa/sway-wm-multi-disp-scripts
# This is just a wrapper around that project to call a single script
# with some things strapped out and some additional functionality 

import re
import subprocess
import json
import sys
import argparse
import os

# Helper function: tofi wrapper for text input
def tofi(options, tofi):
    """
    Call tofi with options
    input: options (list), tofi (str)
    output: stdout of tofi input
    """
    cmd = subprocess.Popen(tofi,
                           shell=True,
                           stdin=subprocess.PIPE,
                           stdout=subprocess.PIPE,
                           stderr=subprocess.PIPE)
    stdout, _ = cmd.communicate('\n'.join(options).encode('utf-8'))
    return stdout.decode('utf-8').strip('\n')

# Helper function: Return workspace names
def getWKNames(wkList):
    """
    Return workspace names in wkList
    input: wkList (list)
    output: name of workspaces in wkList (list)
    """
    return [x['name'] for x in wkList]

# Helper function: Return name of focused workspace
def getFocusedWK(wkList):
    """
    Return focused workspace in wkList
    input: wkList (list)
    output: name of focused workspace in wkList (str)
    """
    return [x for x in wkList if x['focused']][0]['name']

# Helper function: Return project name of workspace
def getProjectFromWKName(wkName):
    """
    Return project name of workspace
    input: wkName (str)
    output: name of project if exists (str)
    """
    search_out = re.search('^\d+::(.*):\d+$', wkName)
    if search_out:
        return search_out.group(1)
    else:
        return None

# Helper function: Return workspace names of project
def getWKNamesFromProj(wkList, projName):
    """
    Return workspace names of project
    input: wkList (list), projName (str)
    output: names of workspaces in projName
    """
    wkNames = getWKNames(wkList)
    return [x for x in wkNames if getProjectFromWKName(x) == projName]

# Helper function: Return output (monitor) name of a workspace
def getOutputForWK(wkList, wkName):
    """
    Return output (monitor) name of a workspace
    input: wkList (list), wkName (str)
    output: name of monitor of wkName (str)
    """
    return [x for x in wkList if x['name'] == wkName][0]['output']

# Helper function: Return list of outputs
def getListOfOutputs(wkList):
    """
    Return list of outputs (monitors)
    input: wkList (list)
    output: outputs (list)
    """
    outputs_with_duplicates = [x['output'] for x in wkList]
    return list(set(outputs_with_duplicates))

# Helper function: Return workspace numbers
def getWorkspaceNums(wkList):
    """
    Return workspace numbers
    input: wkList (list)
    output: list of workspace numbers (list)
    """
    return [x['num'] for x in wkList]

# Helper function: Return valid workspace numbers (numbers that
# are not already part of a project)
def getValidWorkspaceNums(wkList, num):
    """
    Return valid workspace numbers (numbers that are not already
    part of a project)
    input: wkList (list), num (int)
    output: list of valid workspace numbers (list)
    """
    wkNums = getWorkspaceNums(wkList)

    if len(wkNums) == 0:
        return None

    maxWKNum = max(wkNums)
    fullWKNums = range(0, maxWKNum + 1)
    goodWKNums = list(set(fullWKNums) - set(wkNums))

    if num <= len(goodWKNums):
        return [goodWKNums[i] for i in range(0, num)]
    else:
        return goodWKNums + list(range(maxWKNum + 1, maxWKNum + 1 + num - len(goodWKNums)))

# Helper function: Return visible workspaces
def getVisibleWKs(wkList):
    """
    Return visible workspaces
    input: wkList (list)
    output: list of visible workspaces
    """
    return [x['name'] for x in wkList if x['visible']]

# Helper function: Return workspaces on output
def getWorkspacesOnOutput(wkList, outputName):
    """
    Return workspaces on output
    input: wkList (list), outputName (str)
    output: list of workspaces on outputName (list)
    """
    return [x['name'] for x in wkList if x['output'] == outputName]

# Helper function: Return list of projects
def getListOfProjects(wkList):
    """
    Return list of projects
    input: wkList (list)
    output: list of projects (list)
    """
    wknames = getWKNames(wkList)
    wknums = getWorkspaceNums(wkList)

    out1 = [getProjectFromWKName(x) for x in wknames]
    out11 = zip(out1, wknums)
    out2 = [x for x in out11 if x[0] is not None]
    listOfProjects = list(set([x[0] for x in out2]))

    def f(x):
        return min([y[1] for y in out2 if y[0] == x])

    out3 = [f(x) for x in listOfProjects]
    sortedProjects = [x for (y, x) in sorted(zip(out3, listOfProjects))]

    return sortedProjects

# Helper function: Return the name of programm with pid
def proc_name_by_pid(pid):
    """
    Return the name of program with pid
    input: pid (str)
    output: name (str)
    """
    pid_path = "/proc/{}/comm".format(pid)
    name = "???"
    if os.path.exists(pid_path):
        with open(pid_path) as f:
            name = f.read().rstrip('\n')
    return name

# Helper function: Process a single window
def process_window(window, workspace):
    """
    Process a single window (make output appealing for tofi selection menu)
    input: window (dict), workspace (str)
    output: str
    """
    focused = "  "
    if window["focused"]:
        focused = " *"
    if workspace == "__i3_scratch":
        workspace = "S"
    name = proc_name_by_pid(window["pid"]).ljust(20)
    ids = "{}{} ({})".format(focused, workspace, window["id"]).ljust(10)
    return "{} | {} | {}".format(ids, name, window["name"])

# Helper function: recursively process a windows set
def process_windows(windows, workspace):
    """
    Recursively process a windows set
    input: windows (set), workspace (str)
    output: list
    """
    ret = []
    for window in windows:
        sub_wins = window["nodes"]
        if len(sub_wins) == 0:
            desc = process_window(window, workspace)
            ret.append(desc)
        else:
            ret += process_windows(sub_wins, workspace)
    return ret

# Helper function: lookup windows
def lookup_windows():
    """
    Lookup windows
    input:
    output: windows (list) 
    """
    windows = []
    command = "swaymsg -t get_tree"
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    data = json.loads(process.communicate()[0])
    outputs = data["nodes"]

    proc_out = subprocess.run(['swaymsg', '-t', 'get_workspaces'], stdout=subprocess.PIPE)
    wkList = json.loads(proc_out.stdout.decode('utf-8'))

    currentWK = getFocusedWK(wkList)
    currentProj = getProjectFromWKName(currentWK)

    for output in outputs:
        workspaces = output["nodes"]
        for wk in workspaces:
            if currentProj in wk["name"]:
                workspace_name = wk["name"]
                windows += process_windows(wk["nodes"], workspace_name)
                windows += process_windows(wk["floating_nodes"], workspace_name)
    return windows

# Helper function: Show menu of open applications in project
def show_menu(windows):
    """
    Show menu of open applications in project
    input: windows (set)
    output: selection (str)
    """
    command="tofi --horizontal=false --height=15% --prompt-text 'Running applications: '"
    enter="\n"
    input=enter.join(windows).encode("UTF-8")
    process = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    selected = process.communicate(input)[0]
    selected = str(selected, 'UTF-8')
    if selected == "":
        sys.exit(0)
    return re.search('\(([0-9]+)\)', selected).group(1)

# Helper function: Switch focus to the selected window
def focus_window(selection):
    """
    Switch focus to the selected window
    input: selection (str)
    output: void
    """
    command="swaymsg [con_id=\"{}\"] focus".format(id)
    subprocess.Popen(command, shell=True)

# Create a new project
def createProject(projectName):
    """
    Create a new project
    input: projectName (optional, can be overridden by tofi selection, str)
    output: void
    """
    if projectName == True:
        tofi_cmd = "tofi --prompt-text='Enter project name: '"
        projectName = tofi("", tofi_cmd)

    if (projectName is None) or (len(projectName) == 0):
        sys.exit(0)

    proc_out = subprocess.run(['swaymsg', '-t', 'get_workspaces'], stdout=subprocess.PIPE)
    wkList = json.loads(proc_out.stdout.decode('utf-8'))

    for one_wk in wkList:
        one_wk['project'] = getProjectFromWKName(one_wk['name'])

    allOutputs = getListOfOutputs(wkList)
    outputs_to_remove = [x['output'] for x in wkList if x['project'] == projectName]
    allOutputs = list(set(allOutputs).difference(set(outputs_to_remove)))

    newWorkspaceNums = getValidWorkspaceNums(wkList, len(allOutputs))

    commandToRun = ''

    wkNameProjectPart = ':' + projectName + ':'

    for i in range(1, len(allOutputs) + 1):
        # 1. find a workspace which is on this output
        # 2. switch to it if it is already not focused
        # 3. create the new workspace
        currentWKName = str(newWorkspaceNums[i-1]) + ':' + wkNameProjectPart + str(i)

        currentOutputWK = getWorkspacesOnOutput(wkList, allOutputs[i-1])[0]

        if (i != 1) or (currentOutputWK != getFocusedWK(wkList)):
            commandToRun = commandToRun + 'workspace ' + currentOutputWK + '; '

        commandToRun = commandToRun + 'workspace ' + currentWKName + '; '

    commandToRunArray = ['swaymsg', commandToRun]

    subprocess.call(commandToRunArray)

# Rename a project 
def renameProject():
    """
    Rename a project
    input:
    output: void
    """
    tofi_cmd = "tofi --prompt-text='Enter new project name: '"
    projectName = tofi("", tofi_cmd)

    if (projectName is None) or (len(projectName) == 0):
        sys.exit(0)

    proc_out = subprocess.run(['swaymsg', '-t', 'get_workspaces'], stdout=subprocess.PIPE)
    wkList = json.loads(proc_out.stdout.decode('utf-8'))

    allWKNames = getWKNames(wkList)
    currentWK = getFocusedWK(wkList)
    currentProj = getProjectFromWKName(currentWK)

    if currentProj is None:
        sys.exit(1)

    currentProjWKs = getWKNamesFromProj(wkList, currentProj)

    newProjWKs = [x.replace(":" + currentProj + ":", ":" + projectName + ":") for x in currentProjWKs]

    parCommand = ['rename workspace ' + currentProjWKs[i] + ' to ' + newProjWKs[i] + '; '
                  for i, x in enumerate(currentProjWKs)]

    commandToRun = ['swaymsg', ''.join(parCommand)]

    subprocess.call(commandToRun)

# Switch to next project
def switchToNextroject():
    """
    Switch to next project
    input:
    output: void
    """
    proc_out = subprocess.run(['swaymsg', '-t', 'get_workspaces'], stdout=subprocess.PIPE)
    wkList = json.loads(proc_out.stdout.decode('utf-8'))

    focWkName = getFocusedWK(wkList)
    allProjectNames = getListOfProjects(wkList)

    if (len(allProjectNames) == 0) or (allProjectNames is None):
        sys.exit(1)

    currentProjName = getProjectFromWKName(focWkName)

    if currentProjName is None:
        nextProjIndex = 0
    else:
        nextProjIndex = allProjectNames.index(currentProjName)
        if nextProjIndex == (len(allProjectNames) - 1):
            nextProjIndex = 0
        else:
            nextProjIndex = nextProjIndex + 1

    nxtProjWks = getWKNamesFromProj(wkList, allProjectNames[nextProjIndex])

    visWks = getVisibleWKs(wkList)

    wksToMakeVisible = list(set(nxtProjWks) - set(visWks))

    focOutput = getOutputForWK(wkList, focWkName)
    focOutputWks = getWorkspacesOnOutput(wkList, focOutput)
    wkToBeFocused = list(set(focOutputWks).intersection(nxtProjWks))

    parCommToRun = ['workspace ' + x for x in wksToMakeVisible]
    if len(wkToBeFocused) > 0 and wksToMakeVisible[-1] != wkToBeFocused[0]:
        parCommToRun.append('workspace ' + wkToBeFocused[0])

    commandToRun = ["swaymsg", '; '.join(parCommToRun)]

    subprocess.call(commandToRun)

# Switch to next workspace in project
def switchToNextWS():
    """
    Switch t next workspace in project
    input:
    output: void
    """
    proc_out = subprocess.run(['swaymsg', '-t', 'get_workspaces'], stdout=subprocess.PIPE)
    wkList = json.loads(proc_out.stdout.decode('utf-8'))

    allWKNames = getWKNames(wkList)

    currentWK = getFocusedWK(wkList)

    currentProj = getProjectFromWKName(currentWK)

    if currentProj is None:
        sys.exit(0)

    currentProjWKs = getWKNamesFromProj(wkList, currentProj)

    if len(currentProjWKs) == 1:
        sys.exit(0)

    thisWKPos = currentProjWKs.index(currentWK)

    newWKPos = thisWKPos + 1

    if newWKPos == len(currentProjWKs):
        newWKPos = 0

    commandToRun = ['swaymsg', 'workspace ' + currentProjWKs[newWKPos]]

    subprocess.call(commandToRun)

if __name__ == "__main__":
    argParser = argparse.ArgumentParser()
    argParser.add_argument("-c", "--create", required=False, nargs='?', const=True, help="Create new project")
    argParser.add_argument("-r", "--rename", required=False, action='store_true', help="Rename currently focused project")
    argParser.add_argument("-n", "--next", required=False, action='store_true', help="Switch to next project")
    argParser.add_argument("-w", "--wsnext", required=False, action='store_true', help="Switch to next workspace in project")
    argParser.add_argument("-l", "--listinproj", required=False, action='store_true', help="List applications is current proj")
    argParser.add_mutually_exclusive_group()
    args = argParser.parse_args()
    if args.create:
        createProject(args.create)
    elif args.rename:
        renameProject()
    elif args.next:
        switchToNextroject()
    elif args.wsnext:
        switchToNextWS()
    elif args.listinproj:
        windows = lookup_windows()
        id = show_menu(windows)
        focus_window(id)
    else:
        sys.exit(0)
