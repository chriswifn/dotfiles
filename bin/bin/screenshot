#!/bin/bash

# Description:  Take a screenshot
# Input:        menu: run script interactively in a menu style
#               sel:  take a screenshot of selected area
#               foc:  take a screenshot of the focused window
#               full: take a fullscreen screenshot
#               optionally a filename can be passed to any
#               option in order to save the file under a specific
#               name in the current working directory
# Dependencies: grim, slurp, rofi [optional], jq (on Wayland)
#               maim, dmenu [optional] (on Xorg)
# Author:       Christian Hageloch

set -e

#------------------------------------------------------------------------------
# complete context
#------------------------------------------------------------------------------
declare -a COMMANDS=(menu sel foc full)

if [[ -n "$COMP_LINE" ]]; then
  line=${COMP_LINE#* }
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
  done
  exit
fi

#------------------------------------------------------------------------------
# utility functions
#------------------------------------------------------------------------------
_have(){ type "$1" &>/dev/null; }

#------------------------------------------------------------------------------
# functions
#------------------------------------------------------------------------------
_sel() {
  local file
  file="$HOME/Pictures/screenshots/$(date '+%y%m%d%H%M%S').png"
  if [[ -n "$1" ]]; then
    file="$(pwd)/${1%.*}.png"
  fi
  case "$XDG_SESSION_TYPE" in
    wayland)
      if _have grim && _have slurp; then
        grim -g "$(slurp 2>/dev/null)" "$file" 2>/dev/null \
          && echo "$file" && return 0
      fi
      return 1
      ;;
    *)
      if _have maim; then
        maim -s "$file" 2>/dev/null && echo "$file" && return 0
      fi
      return 1
      ;;
  esac
}

_foc() {
  local file
  file="$HOME/Pictures/screenshots/$(date '+%y%m%d%H%M%S').png"
  if [[ -n "$1" ]]; then
    file="$(pwd)/${1%.*}.png"
  fi

  case "$XDG_SESSION_TYPE" in
    wayland)
      if command -v grim >/dev/null && command -v hyprctl >/dev/null; then
        geometry=$(hyprctl activewindow -j | jq -r '"\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"') \
            && grim -g "$geometry" "$file" && echo "$file" && return 0
      fi
      return 1
      ;;
    *)
      if command -v maim >/dev/null; then
        maim -i "$(xdotool getactivewindow 2>/dev/null)" "$file" 2>/dev/null \
          && echo "$file" && return 0
      fi
      return 1
      ;;
  esac
}

_full() {
  local file
  file="$HOME/Pictures/screenshots/$(date '+%y%m%d%H%M%S').png"
  if [[ -n "$1" ]]; then
    file="$(pwd)/${1%.*}.png"
  fi
  case "$XDG_SESSION_TYPE" in
    wayland)
      if _have grim; then
        grim "$file" 2>/dev/null && echo "$file" && return 0
      fi
      return 1
      ;;
    *)
      if _have maim; then
        maim "$file" 2>/dev/null && echo "$file" && return 0
      fi
      return 1
      ;;
  esac
}

_menu() {
  unset 'COMMANDS[0]'
  case "$XDG_SESSION_TYPE" in
    wayland)
      # prompt="rofi -dmenu"
      prompt="tofi"
      ;;
    *)
      prompt="dmenu -i -p"
      ;;
  esac
  selection="$(printf "%s\n" "${COMMANDS[@]}" | ${prompt})"
  [ -n "$selection" ] && "_$selection" "$@" || exit 1
}

#------------------------------------------------------------------------------
# delegation
#------------------------------------------------------------------------------
if [[ -n "$1" ]]; then
  declare cmd="$1"; shift
  for c in "${COMMANDS[@]}"; do
    [[ $c == "$cmd" ]] && "_$cmd" "$@" && exit $?
  done
fi
